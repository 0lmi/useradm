// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
package main

import (
	"github.com/mendersoftware/go-lib-micro/log"
	"github.com/stretchr/testify/mock"

	"github.com/mendersoftware/useradm/jwt"
)

// MockJWTHandler is an autogenerated mock type for the JWTHandler type
type MockJWTHandler struct {
	mock.Mock
}

// ToJWT provides a mock function with given fields: t
func (_m *MockJWTHandler) ToJWT(t *jwt.Token) (string, error) {
	ret := _m.Called(t)

	var r0 string
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromJWT provides a mock function with given fields: _a0
func (_m *MockJWTHandler) FromJWT(_a0 string) (*jwt.Token, error) {
	ret := _m.Called(_a0)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseLog provides a mock function with given fields: l
func (_m *MockJWTHandler) UseLog(l *log.Logger) {
	_m.Called(l)
}

// WithLog provides a mock function with given fields: l
func (_m *MockJWTHandler) WithLog(l *log.Logger) jwt.JWTHandler {
	ret := _m.Called(l)

	var r0 jwt.JWTHandler
	if rf, ok := ret.Get(0).(func(*log.Logger) jwt.JWTHandler); ok {
		r0 = rf(l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.JWTHandler)
		}
	}

	return r0
}
